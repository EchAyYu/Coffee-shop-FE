import { useEffect, useState } from "react";
// üí° B∆Ø·ªöC 1: Import ƒë√∫ng h√†m getOrdersAdmin
import { getProducts, getOrdersAdmin, customers, reservations } from "../../api/api";
import { Link } from 'react-router-dom'; // Th√™m Link n·∫øu ch∆∞a c√≥

export default function AdminDashboard() {
  const [data, setData] = useState({
    customers: [],
    orders: [],
    products: [],
    reservations: [],
    ordersPagination: null, // Th√™m state ƒë·ªÉ l∆∞u th√¥ng tin ph√¢n trang (n·∫øu BE tr·∫£ v·ªÅ)
  });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null); // Th√™m state b√°o l·ªói

  useEffect(() => {
    async function load() {
      setError(null); // Reset l·ªói khi load l·∫°i
      setLoading(true);
      try {
        const [productsRes, ordersRes, customersRes, reservationsRes] = await Promise.all([
          getProducts().catch(err => { console.error("Error loading products:", err); return { data: { data: [] }}; }), // X·ª≠ l√Ω l·ªói t·ª´ng promise
          // üí° B∆Ø·ªöC 2: G·ªçi ƒë√∫ng h√†m getOrdersAdmin
          getOrdersAdmin().catch(err => { console.error("Error loading orders:", err); setError("Kh√¥ng th·ªÉ t·∫£i ƒë∆°n h√†ng."); return { data: { data: [] }}; }),
          customers.getAll().catch(err => { console.error("Error loading customers:", err); setError("Kh√¥ng th·ªÉ t·∫£i kh√°ch h√†ng."); return { data: { data: [] }}; }),
          reservations.list().catch(err => { console.error("Error loading reservations:", err); setError("Kh√¥ng th·ªÉ t·∫£i ƒë·∫∑t b√†n."); return { data: { data: [] }}; }),
        ]);

        // X·ª≠ l√Ω d·ªØ li·ªáu tr·∫£ v·ªÅ t·ª´ getOrdersAdmin (c√≥ th·ªÉ c√≥ pagination)
        const adminOrders = ordersRes.data?.data || [];
        const paginationInfo = ordersRes.data?.pagination || null;


        setData({
          products: productsRes.data?.data || productsRes.data || [],
          orders: adminOrders,
          ordersPagination: paginationInfo, // L∆∞u th√¥ng tin ph√¢n trang
          // S·ª≠a l·ªói x·ª≠ l√Ω customers data n·∫øu API tr·∫£ v·ªÅ object thay v√¨ array
          customers: Array.isArray(customersRes.data?.data)
                     ? customersRes.data.data
                     : Array.isArray(customersRes.data)
                     ? customersRes.data // N·∫øu API tr·∫£ v·ªÅ tr·ª±c ti·∫øp array
                     : [], // M·∫∑c ƒë·ªãnh l√† m·∫£ng r·ªóng n·∫øu kh√¥ng ph·∫£i array
          reservations: reservationsRes.data?.data || reservationsRes.data || [],
        });
      } catch (err) {
        // L·ªói chung n·∫øu Promise.all th·∫•t b·∫°i ho√†n to√†n (√≠t x·∫£y ra v√¨ ƒë√£ c√≥ catch ri√™ng)
        console.error("‚ö†Ô∏è L·ªói t·∫£i d·ªØ li·ªáu admin:", err);
        setError("ƒê√£ x·∫£y ra l·ªói khi t·∫£i d·ªØ li·ªáu trang qu·∫£n tr·ªã.");
      } finally {
        setLoading(false);
      }
    }
    load();
  }, []);

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        {/* ... spinner ... */}
        <div className="flex items-center gap-3"> <div className="w-8 h-8 border-4 border-blue-500 border-t-transparent rounded-full animate-spin"></div> <span className="text-gray-600 font-medium">ƒêang t·∫£i d·ªØ li·ªáu...</span> </div>
      </div>
    );
  }

   if (error) {
     return <div className="p-4 text-red-600 bg-red-50 rounded border border-red-200">{error}</div>;
   }


  const stats = [
    { title: "T·ªïng s·∫£n ph·∫©m", value: data.products.length, icon: "üõí", color: "blue", bgColor: "bg-blue-50", textColor: "text-blue-700", borderColor: "border-blue-200" },
    // üí° C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng ƒë∆°n h√†ng t·ª´ pagination n·∫øu c√≥, n·∫øu kh√¥ng th√¨ d√πng data.orders.length
    { title: "ƒê∆°n h√†ng", value: data.ordersPagination?.totalItems ?? data.orders.length, icon: "üì¶", color: "green", bgColor: "bg-green-50", textColor: "text-green-700", borderColor: "border-green-200" },
    { title: "Kh√°ch h√†ng", value: data.customers.length, icon: "üë•", color: "purple", bgColor: "bg-purple-50", textColor: "text-purple-700", borderColor: "border-purple-200" },
    { title: "S·ªë b√†n ƒë·∫∑t", value: data.reservations.length, icon: "üìÖ", color: "pink", bgColor: "bg-pink-50", textColor: "text-pink-700", borderColor: "border-pink-200" },
    // üí° L∆∞u √Ω: Doanh thu n√†y ch·ªâ t√≠nh d·ª±a tr√™n c√°c ƒë∆°n h√†ng load v·ªÅ trang ƒë·∫ßu ti√™n n·∫øu c√≥ ph√¢n trang
    // { title: "Doanh thu", value: data.orders.reduce((sum, order) => sum + (parseFloat(order.tong_tien) || 0), 0).toLocaleString('vi-VN') + ' ‚Ç´', icon: "üí∞", color: "orange", bgColor: "bg-orange-50", textColor: "text-orange-700", borderColor: "border-orange-200" }
    // T·∫°m th·ªùi ·∫©n doanh thu v√¨ c·∫ßn t√≠nh to√°n ph·ª©c t·∫°p h∆°n n·∫øu c√≥ ph√¢n trang
  ];

  // Helper ƒë·ªãnh d·∫°ng tr·∫°ng th√°i ƒë∆°n h√†ng
  const formatOrderStatus = (status) => {
    switch (status?.toLowerCase()) {
      case 'pending': return { text: 'Ch·ªù x·ª≠ l√Ω', color: 'bg-yellow-100 text-yellow-700' };
      case 'pending_payment': return { text: 'Ch·ªù thanh to√°n', color: 'bg-orange-100 text-orange-700' };
      case 'confirmed': return { text: 'ƒê√£ x√°c nh·∫≠n', color: 'bg-blue-100 text-blue-700' };
      case 'completed': return { text: 'Ho√†n th√†nh', color: 'bg-green-100 text-green-700' };
      case 'cancelled': return { text: 'ƒê√£ h·ªßy', color: 'bg-red-100 text-red-700' };
      default: return { text: status || 'Kh√¥ng r√µ', color: 'bg-gray-100 text-gray-700' };
    }
  };


  return (
    <div className="space-y-8">
      {/* Header */}
      <div className="text-center">
        <h1 className="text-3xl md:text-4xl font-bold text-gray-900 mb-2">
          üìä B·∫£ng ƒëi·ªÅu khi·ªÉn qu·∫£n tr·ªã
        </h1>
        <p className="text-gray-600">T·ªïng quan v·ªÅ h·ªá th·ªëng LO COFFEE</p>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
        {stats.map((stat) => (
          <div
            key={stat.title}
            className={`${stat.bgColor} ${stat.borderColor} border rounded-2xl p-6 shadow-sm hover:shadow-lg hover:-translate-y-1 transition-all duration-300`}
          >
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600 mb-1">{stat.title}</p>
                <p className={`text-3xl font-bold ${stat.textColor}`}>{stat.value}</p>
              </div>
              <div className="text-4xl opacity-80">{stat.icon}</div>
            </div>
          </div>
        ))}
      </div>

      {/* Content Sections */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* S·∫£n ph·∫©m */}
        <div className="bg-white rounded-2xl shadow-md border border-gray-100 p-6">
           {/* ... (Ph·∫ßn hi·ªÉn th·ªã s·∫£n ph·∫©m kh√¥ng ƒë·ªïi) ... */}
           <div className="flex items-center gap-3 mb-6"> <div className="h-10 w-10 rounded-xl bg-blue-100 grid place-items-center"> <span className="text-xl">üõí</span> </div> <h2 className="text-xl font-bold text-gray-900">S·∫£n ph·∫©m g·∫ßn ƒë√¢y</h2> </div> {data.products.length === 0 ? ( <div className="text-center py-8 text-gray-500"> <div className="text-4xl mb-2">üì¶</div> <p>Ch∆∞a c√≥ s·∫£n ph·∫©m n√†o</p> </div> ) : ( <div className="space-y-3 max-h-64 overflow-y-auto pr-2"> {data.products.slice(0, 5).map((product) => ( <div key={product.id_mon || product._id} className="flex items-center justify-between p-3 bg-gray-50 hover:bg-gray-100 rounded-xl transition-colors"> <div className="flex items-center gap-3 min-w-0"> {product.anh && ( <img src={product.anh} alt={product.ten_mon} className="h-10 w-10 rounded-lg object-cover flex-shrink-0" /> )} <div className="flex-1 min-w-0"> <p className="font-medium text-gray-900 text-sm truncate">{product.ten_mon}</p> <p className="text-xs text-gray-600">{product.gia?.toLocaleString('vi-VN')} ‚Ç´</p> </div> </div> <Link to={`/admin/products?edit=${product.id_mon || product._id}`} className="text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded-full hover:bg-blue-200 transition-colors"> Xem </Link> </div> ))} {data.products.length > 5 && ( <p className="text-center text-xs text-gray-500 py-2"> V√† {data.products.length - 5} s·∫£n ph·∫©m kh√°c... </p> )} </div> )}
        </div>

        {/* ƒê∆°n h√†ng */}
        <div className="bg-white rounded-2xl shadow-md border border-gray-100 p-6">
           {/* ... (Ph·∫ßn hi·ªÉn th·ªã ƒë∆°n h√†ng - C·∫≠p nh·∫≠t tr·∫°ng th√°i) ... */}
           <div className="flex items-center gap-3 mb-6"> <div className="h-10 w-10 rounded-xl bg-green-100 grid place-items-center"> <span className="text-xl">üì¶</span> </div> <h2 className="text-xl font-bold text-gray-900">ƒê∆°n h√†ng g·∫ßn ƒë√¢y</h2> </div> {data.orders.length === 0 ? ( <div className="text-center py-8 text-gray-500"> <div className="text-4xl mb-2">üìã</div> <p>Ch∆∞a c√≥ ƒë∆°n h√†ng n√†o</p> </div> ) : ( <div className="space-y-3 max-h-64 overflow-y-auto pr-2"> {data.orders.slice(0, 5).map((order) => { const statusStyle = formatOrderStatus(order.trang_thai); return ( <Link to={`/admin/orders?view=${order.id_don}`} key={order.id_don} className="flex items-center justify-between p-3 bg-gray-50 hover:bg-gray-100 rounded-xl transition-colors group"> <div className="min-w-0"> <p className="font-medium text-gray-900 text-sm group-hover:text-blue-600 transition-colors">#{order.id_don} - {order.ho_ten_nhan || "Kh√°ch h√†ng"}</p> <p className="text-xs text-gray-500 mt-0.5"> {order.ngay_dat ? new Date(order.ngay_dat).toLocaleString('vi-VN') : "Ch∆∞a c√≥ ng√†y"} </p> </div> <div className="text-right flex-shrink-0"> <span className={`inline-block px-2 py-0.5 rounded-full text-xs font-medium ${statusStyle.color}`}> {statusStyle.text} </span> <p className="text-xs font-semibold text-gray-800 mt-1"> {order.tong_tien?.toLocaleString('vi-VN')} ‚Ç´ </p> </div> </Link> );})} {data.ordersPagination && data.ordersPagination.totalItems > 5 && ( <p className="text-center text-xs text-gray-500 py-2"> V√† {data.ordersPagination.totalItems - 5} ƒë∆°n h√†ng kh√°c... </p> )} </div> )}
        </div>
      </div>

       {/* Kh√°ch h√†ng & ƒê·∫∑t b√†n (Layout t∆∞∆°ng t·ª±) */}
       <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            {/* Kh√°ch h√†ng */}
           <div className="bg-white rounded-2xl shadow-md border border-gray-100 p-6">
               {/* ... (Ph·∫ßn hi·ªÉn th·ªã kh√°ch h√†ng kh√¥ng ƒë·ªïi) ... */}
               <div className="flex items-center gap-3 mb-6"> <div className="h-10 w-10 rounded-xl bg-purple-100 grid place-items-center"> <span className="text-xl">üë•</span> </div> <h2 className="text-xl font-bold text-gray-900">Kh√°ch h√†ng m·ªõi</h2> </div> {data.customers.length === 0 ? ( <div className="text-center py-8 text-gray-500"> <div className="text-4xl mb-2">üë§</div> <p>Ch∆∞a c√≥ kh√°ch h√†ng n√†o</p> </div> ) : ( <div className="space-y-3 max-h-64 overflow-y-auto pr-2"> {data.customers.slice(0, 5).map((customer) => ( <div key={customer.id_kh || customer.id_tk} className="flex items-center justify-between p-3 bg-gray-50 rounded-xl"> <div className="flex items-center gap-3 min-w-0"> <div className="h-10 w-10 rounded-full bg-gradient-to-br from-purple-400 to-pink-400 grid place-items-center text-white font-semibold text-sm flex-shrink-0"> {(customer.ho_ten || customer.ten_dn || "A").charAt(0).toUpperCase()} </div> <div className="flex-1 min-w-0"> <p className="font-medium text-gray-900 text-sm truncate">{customer.ho_ten || customer.ten_dn || "Kh√°ch h√†ng"}</p> <p className="text-xs text-gray-500 truncate">{customer.email || "Kh√¥ng c√≥ email"}</p> </div> </div> <span className="text-xs text-gray-400">ID: {customer.id_kh || customer.id_tk}</span> </div> ))} {data.customers.length > 5 && ( <p className="text-center text-xs text-gray-500 py-2"> V√† {data.customers.length - 5} kh√°ch h√†ng kh√°c... </p> )} </div> )}
           </div>
            {/* ƒê·∫∑t b√†n */}
           <div className="bg-white rounded-2xl shadow-md border border-gray-100 p-6">
              {/* ... (Ph·∫ßn hi·ªÉn th·ªã ƒë·∫∑t b√†n kh√¥ng ƒë·ªïi) ... */}
              <div className="flex items-center gap-3 mb-6"> <div className="h-10 w-10 rounded-xl bg-pink-100 grid place-items-center"> <span className="text-xl">üìÖ</span> </div> <h2 className="text-xl font-bold text-gray-900">ƒê·∫∑t b√†n g·∫ßn ƒë√¢y</h2> </div> {data.reservations.length === 0 ? ( <div className="text-center py-8 text-gray-500"> <div className="text-4xl mb-2">üìÖ</div> <p>Ch∆∞a c√≥ b√†n n√†o ƒë∆∞·ª£c ƒë·∫∑t</p> </div> ) : ( <div className="space-y-3 max-h-64 overflow-y-auto pr-2"> {data.reservations.slice(0, 5).map((reservation) => ( <Link to={`/admin/reservations?view=${reservation.id_datban}`} key={reservation.id_datban} className="flex items-center justify-between p-3 bg-gray-50 hover:bg-gray-100 rounded-xl transition-colors group"> <div className="min-w-0"> <p className="font-medium text-gray-900 text-sm group-hover:text-pink-600 transition-colors">{reservation.ho_ten || "Kh√°ch h√†ng"}</p> <p className="text-xs text-gray-500 mt-0.5">{reservation.sdt || "Kh√¥ng c√≥ sdt"}</p> </div> <div className="text-right flex-shrink-0"> <span className={`inline-block px-2 py-0.5 rounded-full text-xs font-medium ${ reservation.trang_thai === 'CONFIRMED' ? 'bg-green-100 text-green-700' : reservation.trang_thai === 'CANCELLED' ? 'bg-red-100 text-red-700' : 'bg-yellow-100 text-yellow-700' }`}> {reservation.trang_thai || 'PENDING'} </span> <p className="text-xs text-gray-500 mt-1">{reservation.ngay_dat ? new Date(reservation.ngay_dat).toLocaleDateString('vi-VN') : ''}</p> </div> </Link> ))} {data.reservations.length > 5 && ( <p className="text-center text-xs text-gray-500 py-2"> V√† {data.reservations.length - 5} l∆∞·ª£t ƒë·∫∑t b√†n kh√°c... </p> )} </div> )}
           </div>
       </div>
    </div>
  );
}
